{
  "version": 3,
  "sources": ["../../../../node_modules/.pnpm/stackframe@1.3.4/node_modules/stackframe/stackframe.js", "../../../../node_modules/.pnpm/error-stack-parser@2.1.4/node_modules/error-stack-parser/error-stack-parser.js", "../migration_function.test.ts", "../../src/deltachat/migration.ts", "../../../shared/logger.ts"],
  "sourcesContent": ["(function(root, factory) {\n    'use strict';\n    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.\n\n    /* istanbul ignore next */\n    if (typeof define === 'function' && define.amd) {\n        define('stackframe', [], factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory();\n    } else {\n        root.StackFrame = factory();\n    }\n}(this, function() {\n    'use strict';\n    function _isNumber(n) {\n        return !isNaN(parseFloat(n)) && isFinite(n);\n    }\n\n    function _capitalize(str) {\n        return str.charAt(0).toUpperCase() + str.substring(1);\n    }\n\n    function _getter(p) {\n        return function() {\n            return this[p];\n        };\n    }\n\n    var booleanProps = ['isConstructor', 'isEval', 'isNative', 'isToplevel'];\n    var numericProps = ['columnNumber', 'lineNumber'];\n    var stringProps = ['fileName', 'functionName', 'source'];\n    var arrayProps = ['args'];\n    var objectProps = ['evalOrigin'];\n\n    var props = booleanProps.concat(numericProps, stringProps, arrayProps, objectProps);\n\n    function StackFrame(obj) {\n        if (!obj) return;\n        for (var i = 0; i < props.length; i++) {\n            if (obj[props[i]] !== undefined) {\n                this['set' + _capitalize(props[i])](obj[props[i]]);\n            }\n        }\n    }\n\n    StackFrame.prototype = {\n        getArgs: function() {\n            return this.args;\n        },\n        setArgs: function(v) {\n            if (Object.prototype.toString.call(v) !== '[object Array]') {\n                throw new TypeError('Args must be an Array');\n            }\n            this.args = v;\n        },\n\n        getEvalOrigin: function() {\n            return this.evalOrigin;\n        },\n        setEvalOrigin: function(v) {\n            if (v instanceof StackFrame) {\n                this.evalOrigin = v;\n            } else if (v instanceof Object) {\n                this.evalOrigin = new StackFrame(v);\n            } else {\n                throw new TypeError('Eval Origin must be an Object or StackFrame');\n            }\n        },\n\n        toString: function() {\n            var fileName = this.getFileName() || '';\n            var lineNumber = this.getLineNumber() || '';\n            var columnNumber = this.getColumnNumber() || '';\n            var functionName = this.getFunctionName() || '';\n            if (this.getIsEval()) {\n                if (fileName) {\n                    return '[eval] (' + fileName + ':' + lineNumber + ':' + columnNumber + ')';\n                }\n                return '[eval]:' + lineNumber + ':' + columnNumber;\n            }\n            if (functionName) {\n                return functionName + ' (' + fileName + ':' + lineNumber + ':' + columnNumber + ')';\n            }\n            return fileName + ':' + lineNumber + ':' + columnNumber;\n        }\n    };\n\n    StackFrame.fromString = function StackFrame$$fromString(str) {\n        var argsStartIndex = str.indexOf('(');\n        var argsEndIndex = str.lastIndexOf(')');\n\n        var functionName = str.substring(0, argsStartIndex);\n        var args = str.substring(argsStartIndex + 1, argsEndIndex).split(',');\n        var locationString = str.substring(argsEndIndex + 1);\n\n        if (locationString.indexOf('@') === 0) {\n            var parts = /@(.+?)(?::(\\d+))?(?::(\\d+))?$/.exec(locationString, '');\n            var fileName = parts[1];\n            var lineNumber = parts[2];\n            var columnNumber = parts[3];\n        }\n\n        return new StackFrame({\n            functionName: functionName,\n            args: args || undefined,\n            fileName: fileName,\n            lineNumber: lineNumber || undefined,\n            columnNumber: columnNumber || undefined\n        });\n    };\n\n    for (var i = 0; i < booleanProps.length; i++) {\n        StackFrame.prototype['get' + _capitalize(booleanProps[i])] = _getter(booleanProps[i]);\n        StackFrame.prototype['set' + _capitalize(booleanProps[i])] = (function(p) {\n            return function(v) {\n                this[p] = Boolean(v);\n            };\n        })(booleanProps[i]);\n    }\n\n    for (var j = 0; j < numericProps.length; j++) {\n        StackFrame.prototype['get' + _capitalize(numericProps[j])] = _getter(numericProps[j]);\n        StackFrame.prototype['set' + _capitalize(numericProps[j])] = (function(p) {\n            return function(v) {\n                if (!_isNumber(v)) {\n                    throw new TypeError(p + ' must be a Number');\n                }\n                this[p] = Number(v);\n            };\n        })(numericProps[j]);\n    }\n\n    for (var k = 0; k < stringProps.length; k++) {\n        StackFrame.prototype['get' + _capitalize(stringProps[k])] = _getter(stringProps[k]);\n        StackFrame.prototype['set' + _capitalize(stringProps[k])] = (function(p) {\n            return function(v) {\n                this[p] = String(v);\n            };\n        })(stringProps[k]);\n    }\n\n    return StackFrame;\n}));\n", "(function(root, factory) {\n    'use strict';\n    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.\n\n    /* istanbul ignore next */\n    if (typeof define === 'function' && define.amd) {\n        define('error-stack-parser', ['stackframe'], factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory(require('stackframe'));\n    } else {\n        root.ErrorStackParser = factory(root.StackFrame);\n    }\n}(this, function ErrorStackParser(StackFrame) {\n    'use strict';\n\n    var FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\\S+:\\d+/;\n    var CHROME_IE_STACK_REGEXP = /^\\s*at .*(\\S+:\\d+|\\(native\\))/m;\n    var SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\\[native code])?$/;\n\n    return {\n        /**\n         * Given an Error object, extract the most information from it.\n         *\n         * @param {Error} error object\n         * @return {Array} of StackFrames\n         */\n        parse: function ErrorStackParser$$parse(error) {\n            if (typeof error.stacktrace !== 'undefined' || typeof error['opera#sourceloc'] !== 'undefined') {\n                return this.parseOpera(error);\n            } else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {\n                return this.parseV8OrIE(error);\n            } else if (error.stack) {\n                return this.parseFFOrSafari(error);\n            } else {\n                throw new Error('Cannot parse given Error object');\n            }\n        },\n\n        // Separate line and column numbers from a string of the form: (URI:Line:Column)\n        extractLocation: function ErrorStackParser$$extractLocation(urlLike) {\n            // Fail-fast but return locations like \"(native)\"\n            if (urlLike.indexOf(':') === -1) {\n                return [urlLike];\n            }\n\n            var regExp = /(.+?)(?::(\\d+))?(?::(\\d+))?$/;\n            var parts = regExp.exec(urlLike.replace(/[()]/g, ''));\n            return [parts[1], parts[2] || undefined, parts[3] || undefined];\n        },\n\n        parseV8OrIE: function ErrorStackParser$$parseV8OrIE(error) {\n            var filtered = error.stack.split('\\n').filter(function(line) {\n                return !!line.match(CHROME_IE_STACK_REGEXP);\n            }, this);\n\n            return filtered.map(function(line) {\n                if (line.indexOf('(eval ') > -1) {\n                    // Throw away eval information until we implement stacktrace.js/stackframe#8\n                    line = line.replace(/eval code/g, 'eval').replace(/(\\(eval at [^()]*)|(,.*$)/g, '');\n                }\n                var sanitizedLine = line.replace(/^\\s+/, '').replace(/\\(eval code/g, '(').replace(/^.*?\\s+/, '');\n\n                // capture and preseve the parenthesized location \"(/foo/my bar.js:12:87)\" in\n                // case it has spaces in it, as the string is split on \\s+ later on\n                var location = sanitizedLine.match(/ (\\(.+\\)$)/);\n\n                // remove the parenthesized location from the line, if it was matched\n                sanitizedLine = location ? sanitizedLine.replace(location[0], '') : sanitizedLine;\n\n                // if a location was matched, pass it to extractLocation() otherwise pass all sanitizedLine\n                // because this line doesn't have function name\n                var locationParts = this.extractLocation(location ? location[1] : sanitizedLine);\n                var functionName = location && sanitizedLine || undefined;\n                var fileName = ['eval', '<anonymous>'].indexOf(locationParts[0]) > -1 ? undefined : locationParts[0];\n\n                return new StackFrame({\n                    functionName: functionName,\n                    fileName: fileName,\n                    lineNumber: locationParts[1],\n                    columnNumber: locationParts[2],\n                    source: line\n                });\n            }, this);\n        },\n\n        parseFFOrSafari: function ErrorStackParser$$parseFFOrSafari(error) {\n            var filtered = error.stack.split('\\n').filter(function(line) {\n                return !line.match(SAFARI_NATIVE_CODE_REGEXP);\n            }, this);\n\n            return filtered.map(function(line) {\n                // Throw away eval information until we implement stacktrace.js/stackframe#8\n                if (line.indexOf(' > eval') > -1) {\n                    line = line.replace(/ line (\\d+)(?: > eval line \\d+)* > eval:\\d+:\\d+/g, ':$1');\n                }\n\n                if (line.indexOf('@') === -1 && line.indexOf(':') === -1) {\n                    // Safari eval frames only have function names and nothing else\n                    return new StackFrame({\n                        functionName: line\n                    });\n                } else {\n                    var functionNameRegex = /((.*\".+\"[^@]*)?[^@]*)(?:@)/;\n                    var matches = line.match(functionNameRegex);\n                    var functionName = matches && matches[1] ? matches[1] : undefined;\n                    var locationParts = this.extractLocation(line.replace(functionNameRegex, ''));\n\n                    return new StackFrame({\n                        functionName: functionName,\n                        fileName: locationParts[0],\n                        lineNumber: locationParts[1],\n                        columnNumber: locationParts[2],\n                        source: line\n                    });\n                }\n            }, this);\n        },\n\n        parseOpera: function ErrorStackParser$$parseOpera(e) {\n            if (!e.stacktrace || (e.message.indexOf('\\n') > -1 &&\n                e.message.split('\\n').length > e.stacktrace.split('\\n').length)) {\n                return this.parseOpera9(e);\n            } else if (!e.stack) {\n                return this.parseOpera10(e);\n            } else {\n                return this.parseOpera11(e);\n            }\n        },\n\n        parseOpera9: function ErrorStackParser$$parseOpera9(e) {\n            var lineRE = /Line (\\d+).*script (?:in )?(\\S+)/i;\n            var lines = e.message.split('\\n');\n            var result = [];\n\n            for (var i = 2, len = lines.length; i < len; i += 2) {\n                var match = lineRE.exec(lines[i]);\n                if (match) {\n                    result.push(new StackFrame({\n                        fileName: match[2],\n                        lineNumber: match[1],\n                        source: lines[i]\n                    }));\n                }\n            }\n\n            return result;\n        },\n\n        parseOpera10: function ErrorStackParser$$parseOpera10(e) {\n            var lineRE = /Line (\\d+).*script (?:in )?(\\S+)(?:: In function (\\S+))?$/i;\n            var lines = e.stacktrace.split('\\n');\n            var result = [];\n\n            for (var i = 0, len = lines.length; i < len; i += 2) {\n                var match = lineRE.exec(lines[i]);\n                if (match) {\n                    result.push(\n                        new StackFrame({\n                            functionName: match[3] || undefined,\n                            fileName: match[2],\n                            lineNumber: match[1],\n                            source: lines[i]\n                        })\n                    );\n                }\n            }\n\n            return result;\n        },\n\n        // Opera 10.65+ Error.stack very similar to FF/Safari\n        parseOpera11: function ErrorStackParser$$parseOpera11(error) {\n            var filtered = error.stack.split('\\n').filter(function(line) {\n                return !!line.match(FIREFOX_SAFARI_STACK_REGEXP) && !line.match(/^Error created at/);\n            }, this);\n\n            return filtered.map(function(line) {\n                var tokens = line.split('@');\n                var locationParts = this.extractLocation(tokens.pop());\n                var functionCall = (tokens.shift() || '');\n                var functionName = functionCall\n                    .replace(/<anonymous function(: (\\w+))?>/, '$2')\n                    .replace(/\\([^)]*\\)/g, '') || undefined;\n                var argsRaw;\n                if (functionCall.match(/\\(([^)]*)\\)/)) {\n                    argsRaw = functionCall.replace(/^[^(]+\\(([^)]*)\\)$/, '$1');\n                }\n                var args = (argsRaw === undefined || argsRaw === '[arguments not available]') ?\n                    undefined : argsRaw.split(',');\n\n                return new StackFrame({\n                    functionName: functionName,\n                    args: args,\n                    fileName: locationParts[0],\n                    lineNumber: locationParts[1],\n                    columnNumber: locationParts[2],\n                    source: line\n                });\n            }, this);\n        }\n    };\n}));\n", "//@ts-check\nimport { describe } from 'mocha'\nimport { expect } from 'chai'\nimport { existsSync, mkdtempSync } from 'fs'\nimport { join, dirname } from 'path'\nimport { fileURLToPath } from 'url'\nimport AdmZip from 'adm-zip'\nimport { tmpdir } from 'os'\nimport { readdir } from 'fs/promises'\nimport { migrateAccountsIfNeeded } from '../src/deltachat/migration'\nimport { getLogger, setLogHandler } from '@deltachat-desktop/shared/logger'\nimport { startDeltaChat } from '@deltachat/stdio-rpc-server'\nimport { RC_Config } from '@deltachat-desktop/shared/shared-types'\n\nconst __dirname = dirname(fileURLToPath(import.meta.url))\n\nconst log = getLogger('test')\n\nbefore(async () => {\n  if (process.env['DEBUG']) {\n    setLogHandler(console.debug, {\n      'log-debug': process.env['DEBUG'] == '2',\n    } as RC_Config)\n  } else {\n    setLogHandler(() => {}, {} as RC_Config)\n  }\n})\n\nconst zip = new AdmZip(join(__dirname, '../test_data/migration-test-data.zip'))\n\n// make test environment\nconst testEnvironment = mkdtempSync(join(tmpdir(), 'deltachat-migration-test-'))\n\nzip.extractAllTo(testEnvironment)\n\nlog.debug({ testEnvironment })\n\nconst versions = await readdir(testEnvironment)\n\n/** the test data for these versions is broken, like only one account */\nconst BROKEN_TEST_DATA = [\n  'DeltaChat-1.3.1.AppImage',\n  'DeltaChat-1.3.3.AppImage',\n]\n\ndescribe('/electron/main/account-migration', async () => {\n  for (const version of versions) {\n    const versionPath = join(testEnvironment, version)\n\n    if (BROKEN_TEST_DATA.includes(version)) {\n      continue\n    }\n\n    it(`migration from ${version} works`, async () => {\n      const targetFolder = join(versionPath, 'DeltaChat/accounts')\n      log.info({ targetFolder })\n\n      log.debug(\n        { targetFolder },\n        await readdir(versionPath, { recursive: true })\n      )\n\n      // run migration function on environment\n      if (!existsSync(join(targetFolder, 'accounts.toml'))) {\n        const migrated = await migrateAccountsIfNeeded(targetFolder, log, true)\n        expect(migrated).to.be.true\n      } else {\n        log.debug(\n          'accounts.toml already exists, the migration from absolute paths to relative ones should happen on normal start'\n        )\n      }\n\n      // test after migration if both accounts are there\n      const eventLogger = (accountId: number, event: any) =>\n        log.debug('core-event', { accountId, ...event })\n      const tmpDC = await startDeltaChat(targetFolder, {\n        disableEnvPath: true,\n        muteStdErr:\n          process.env['DEBUG'] === undefined ||\n          process.env['RUST_LOG'] === undefined,\n      })\n      tmpDC.on('ALL', eventLogger)\n      after(() => {\n        tmpDC.off('ALL', eventLogger)\n        tmpDC.close()\n      })\n\n      log.debug('test if migration worked')\n\n      const accounts = await tmpDC.rpc.getAllAccounts()\n      const configured_accounts = accounts.filter(\n        acc => acc.kind === 'Configured'\n      )\n      expect(configured_accounts).to.have.length(2)\n\n      // check if the account email addresses are correct\n      expect(\n        configured_accounts.map(acc => acc.kind === 'Configured' && acc.addr)\n      ).to.have.members(['tmpy.mh3we@testrun.org', 'tmpy.3ftgt@testrun.org'])\n\n      log.debug('test done')\n    })\n\n    // remove test environment\n  }\n})\n", "import { startDeltaChat } from '@deltachat/stdio-rpc-server'\nimport { existsSync, lstatSync } from 'fs'\nimport { join } from 'path'\nimport { Logger } from '../../../shared/logger.js'\nimport { mkdir, readdir, rename, rm, rmdir, stat } from 'fs/promises'\nimport { DcEvent } from '@deltachat/jsonrpc-client'\n\n/**\n *\n * @param cwd\n * @param log\n * @param treatFailedMigrationAsError used for the automated testing\n * @returns {Promise<boolean>} whether something was migrated\n */\nexport async function migrateAccountsIfNeeded(\n  cwd: string,\n  log: Logger,\n  treatFailedMigrationAsError: boolean = false\n): Promise<boolean> {\n  let tmpDC\n  const eventLogger = (accountId: number, event: DcEvent) =>\n    log.debug('core-event', { accountId, ...event })\n  try {\n    const new_accounts_format = existsSync(join(cwd, 'accounts.toml'))\n    if (new_accounts_format) {\n      log.debug('migration not needed: accounts.toml already exists')\n      return false\n    }\n\n    log.debug('accounts.toml not found, checking if there is previous data')\n\n    const configPath = join(cwd, '..')\n\n    const accountFoldersFormat1 = (await readdir(configPath)).filter(\n      folderName => {\n        const path = join(configPath, folderName)\n        // isDeltaAccountFolder\n        try {\n          const db_path = join(path, 'db.sqlite')\n          return (\n            lstatSync(path).isDirectory() &&\n            existsSync(db_path) &&\n            lstatSync(db_path).isFile() &&\n            !lstatSync(path).isSymbolicLink()\n          )\n        } catch (error) {\n          log.debug('error while testing if folder is account', error)\n          return false\n        }\n      }\n    )\n\n    const migrateFromFormat1 = accountFoldersFormat1.length !== 0\n    const migrateFromFormat2 = existsSync(cwd)\n\n    if (!migrateFromFormat1 && !migrateFromFormat2) {\n      log.info('migration not needed: nothing to migrate')\n      return false\n    }\n\n    // this is the same as cwd, but for clarity added ../accounts\n    const path_accounts = join(cwd, '..', 'accounts')\n    const pathAccountsOld = join(cwd, '..', 'accounts_old')\n\n    if (migrateFromFormat2) {\n      log.info(`found old some accounts (format 2), we need to migrate...`)\n\n      // First, rename accounts folder to accounts_old\n      await rename(path_accounts, pathAccountsOld)\n    }\n\n    // Next, create temporary account manager to migrate accounts\n    tmpDC = await startDeltaChat(path_accounts, {\n      muteStdErr: false,\n    })\n    tmpDC.on('ALL', eventLogger)\n\n    const oldFoldersToDelete = []\n\n    if (migrateFromFormat1) {\n      log.info(\n        `found old ${accountFoldersFormat1.length} legacy accounts (1), we need to migrate...`\n      )\n\n      // Next, iterate over all folders in accounts_old\n      for (const folder of accountFoldersFormat1) {\n        log.debug(`migrating legacy account \"${folder}\"`)\n        const pathDBFile = join(configPath, folder, 'db.sqlite')\n\n        // fix import account without blobs folder (not all of them are unconfigured it seems)\n        const blobsFolder = join(configPath, folder, 'db.sqlite-blobs')\n        if (!existsSync(blobsFolder)) {\n          await mkdir(blobsFolder, { recursive: true })\n        }\n\n        try {\n          await tmpDC.rpc.migrateAccount(pathDBFile)\n          oldFoldersToDelete.push(folder)\n        } catch (error) {\n          log.error(`Failed to migrate account at path \"${pathDBFile}\"`, error)\n          if (treatFailedMigrationAsError) {\n            throw error\n          }\n        }\n      }\n    }\n\n    if (migrateFromFormat2) {\n      // Next, iterate over all folders in accounts_old\n      for (const entry of await readdir(pathAccountsOld)) {\n        const stat_result = await stat(join(pathAccountsOld, entry))\n        if (!stat_result.isDirectory()) continue\n        log.debug(`migrating account \"${join(pathAccountsOld, entry)}\"`)\n        const path_dbfile = join(pathAccountsOld, entry, 'db.sqlite')\n        if (!existsSync(path_dbfile)) {\n          log.warn(\n            'found an old accounts folder without a db.sqlite file, skipping'\n          )\n          continue\n        }\n\n        // fix import account without blobs folder (not all of them are unconfigured)\n        const blobsFolder = join(pathAccountsOld, entry, 'db.sqlite-blobs')\n        if (!existsSync(blobsFolder)) {\n          await mkdir(blobsFolder, { recursive: true })\n        }\n        try {\n          const account_id = await tmpDC.rpc.migrateAccount(path_dbfile)\n          // check if there are stickers\n          const old_sticker_folder = join(pathAccountsOld, entry, 'stickers')\n          if (existsSync(old_sticker_folder)) {\n            log.debug('found stickers, migrating them', old_sticker_folder)\n            try {\n              const blobdir = await tmpDC.rpc.getBlobDir(account_id)\n              if (!blobdir) {\n                throw new Error('blobdir is undefined')\n              }\n              const new_sticker_folder = join(blobdir, '../stickers')\n              await rename(old_sticker_folder, new_sticker_folder)\n            } catch (error) {\n              log.error('stickers migration failed', old_sticker_folder, error)\n              if (treatFailedMigrationAsError) {\n                throw error\n              }\n            }\n          }\n          // if successful remove old account folder too\n          oldFoldersToDelete.push(join(pathAccountsOld, entry))\n        } catch (error) {\n          log.error(\n            `Failed to migrate account at path \"${path_dbfile}\":`,\n            error\n          )\n        }\n      }\n    }\n    // cleanup\n    tmpDC.off('ALL', eventLogger)\n    tmpDC.close()\n    for (const oldFolder of oldFoldersToDelete.map(f => join(configPath, f))) {\n      try {\n        try {\n          await rm(join(oldFolder, '.DS_Store'))\n        } catch (error) {\n          /* ignore */\n        }\n        await rmdir(oldFolder)\n      } catch (error) {\n        log.error('Failed to cleanup old folder:', oldFolder, error)\n      }\n    }\n    log.info('migration completed')\n\n    return true\n  } catch (err) {\n    tmpDC?.off('ALL', eventLogger)\n    tmpDC?.close()\n    throw err\n  }\n}\n", "import errorStackParser from 'error-stack-parser'\nimport StackFrame from 'stackframe'\nimport { RC_Config } from './shared-types.js'\n\nconst startTime = Date.now()\n\nexport const colorize = (light: number, code: number) => (str: string) =>\n  '\\x1B[' + light + ';' + code + 'm' + str + '\\x1b[0m'\nexport const blue = colorize(1, 34)\nexport const red = colorize(1, 31)\nexport const yellow = colorize(1, 33)\nexport const grey = colorize(0, 37)\nexport const green = colorize(1, 37)\nexport const cyan = colorize(1, 36)\n\nconst emojiFontCss =\n  'font-family: Roboto, \"Apple Color Emoji\", NotoEmoji, \"Helvetica Neue\", Arial, Helvetica, NotoMono, sans-serif !important;'\n\nexport const enum LogLevelString {\n  DEBUG = 'DEBUG',\n  WARNING = 'WARNING',\n  INFO = 'INFO',\n  ERROR = 'ERROR',\n  CRITICAL = 'CRITICAL',\n}\n\nconst LoggerVariants = [\n  {\n    log: console.debug,\n    level: LogLevelString.DEBUG,\n    emoji: '\uD83D\uDD78\uFE0F',\n    symbol: '[D]',\n  },\n  {\n    log: console.info,\n    level: LogLevelString.INFO,\n    emoji: '\u2139\uFE0F',\n    symbol: blue('[i]'),\n  },\n  {\n    log: console.warn,\n    level: LogLevelString.WARNING,\n    emoji: '\u26A0\uFE0F',\n    symbol: yellow('[w]'),\n  },\n  {\n    log: console.error,\n    level: LogLevelString.ERROR,\n    emoji: '\uD83D\uDEA8',\n    symbol: red('[E]'),\n  },\n  {\n    log: console.error,\n    level: LogLevelString.CRITICAL,\n    emoji: '\uD83D\uDEA8\uD83D\uDEA8',\n    symbol: red('[C]'),\n  },\n]\n\nexport function printProcessLogLevelInfo() {\n  /* ignore-console-log */\n  console.info(\n    `%cLogging Levels:\\n${LoggerVariants.map(v => `${v.emoji} ${v.level}`).join(\n      '\\n'\n    )}`,\n    emojiFontCss\n  )\n  /* ignore-console-log */\n  console.info(\n    `# Tips and Tricks for using the search filter in the browser console:\n\n\u2022 Use space to separate search terms\n\u2022 Exclude search terms using -\n\u2022 If the search term contains spaces you should escape it with \"\"\n\nExamples:\n\n\uD83D\uDD78\uFE0F          only show debug messages\n-\uD83D\uDD78\uFE0F         don't show debug messages\n\u2139\uFE0F          only show info messages\n-\u2139\uFE0F         don't show info messages\n\uD83D\uDC7B          only show events from background accounts (not selected accounts)\n-\uD83D\uDC7B         don't show events from background accounts (not selected accounts)\n\uD83D\uDCE1          only show events\n-\uD83D\uDCE1         don't show any events\n[JSONRPC]   only show jsonrpc messages\n-[JSONRPC]  don't show jsonrpc messages\n\nStart deltachat with --devmode (or --log-debug and --log-to-console) argument to show full log output.\nIf the log seems quiet, make sure the 'All levels' drop down has 'Verbose' checked.\n  `\n  )\n}\n\nexport type LogHandlerFunction = (\n  channel: string,\n  level: LogLevelString,\n  stacktrace: ReturnType<typeof getStackTrace>,\n  ...args: any[]\n) => void\n\nlet handler: LogHandlerFunction\nlet rc: RC_Config = {} as any\n\nexport function setLogHandler(\n  LogHandler: LogHandlerFunction,\n  rcObject: RC_Config\n) {\n  handler = LogHandler\n  rc = rcObject\n}\n\nfunction log(\n  { channel, isMainProcess }: Logger,\n  level: number,\n  stacktrace: ReturnType<typeof getStackTrace>,\n  args: any[]\n) {\n  const variant = LoggerVariants[level]\n  if (!handler) {\n    /* ignore-console-log */\n    console.log('Failed to log message - Handler not initialized yet')\n    /* ignore-console-log */\n    console.log(`Log Message: ${channel} ${level} ${args.join(' ')}`)\n    throw Error('Failed to log message - Handler not initialized yet')\n  }\n  handler(channel, variant.level, stacktrace, ...args)\n  if (rc['log-to-console']) {\n    if (isMainProcess) {\n      const beginning = `${Math.round((Date.now() - startTime) / 100) / 10}s ${\n        LoggerVariants[level].symbol\n      }${grey(channel)}:`\n      if (!stacktrace) {\n        variant.log(beginning, ...args)\n      } else {\n        variant.log(\n          beginning,\n          ...args,\n          red(\n            Array.isArray(stacktrace)\n              ? stacktrace.map(s => `\\n${s.toString()}`).join()\n              : stacktrace\n          )\n        )\n      }\n    } else {\n      const prefix = `%c${variant.emoji}%c${channel}`\n      const prefixStyle = [emojiFontCss, 'color:blueviolet;']\n\n      if (stacktrace) {\n        variant.log(prefix, ...prefixStyle, stacktrace, ...args)\n      } else {\n        variant.log(prefix, ...prefixStyle, ...args)\n      }\n    }\n  }\n}\n\nfunction getStackTrace(): StackFrame[] | string {\n  const rawStack: StackFrame[] = errorStackParser.parse(\n    new Error('Get Stacktrace')\n  )\n  const stack = rawStack.slice(2, rawStack.length)\n  return rc['machine-readable-stacktrace']\n    ? stack\n    : stack.map(s => `\\n${s.toString()}`).join()\n}\n\nexport class Logger {\n  //@ts-ignore\n  isMainProcess = typeof window === 'undefined'\n  constructor(public readonly channel: string) {\n    if (channel === 'core/event') {\n      // disable js stacktrace for core events\n      // as it is useless information (always pointing to the event emitter)\n      this.getStackTrace = () => ''\n    }\n  }\n\n  private getStackTrace(): StackFrame[] | string {\n    const rawStack: StackFrame[] = errorStackParser.parse(\n      new Error('Get Stacktrace')\n    )\n    const stack = rawStack.slice(2, rawStack.length)\n    return rc['machine-readable-stacktrace']\n      ? stack\n      : stack.map(s => `\\n${s.toString()}`).join()\n  }\n\n  debug(...args: any[]) {\n    if (!rc['log-debug']) return\n    log(this, 0, '', args)\n  }\n\n  info(...args: any[]) {\n    log(this, 1, '', args)\n  }\n\n  warn(...args: any[]) {\n    log(this, 2, this.getStackTrace(), args)\n  }\n\n  error(...args: any[]) {\n    log(this, 3, this.getStackTrace(), args)\n  }\n\n  /** use this when you know that the stacktrace is not relevant */\n  errorWithoutStackTrace(...args: any[]) {\n    log(this, 3, [], args)\n  }\n\n  critical(...args: any[]) {\n    log(this, 4, this.getStackTrace(), args)\n  }\n}\n\nexport function getLogger(channel: string) {\n  return new Logger(channel)\n}\n\n// Fix for error not being able to be converted into json\n// From https://stackoverflow.com/a/18391400\nif (!('toJSON' in Error.prototype))\n  Object.defineProperty(Error.prototype, 'toJSON', {\n    value: function () {\n      const alt = {}\n      Object.getOwnPropertyNames(this).forEach(function (key) {\n        //@ts-ignore\n        alt[key] = this[key]\n      }, this)\n      return alt\n    },\n    configurable: true,\n    writable: true,\n  })\n"],
  "mappings": "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",
  "names": ["i", "existsSync", "join", "readdir", "log", "errorStackParser", "startDeltaChat", "log", "join", "readdir", "existsSync"]
}
