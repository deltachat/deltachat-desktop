# git-cliff configuration file
# Documentation: https://git-cliff.org/docs/configuration

[changelog]
# changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% if version %}\
    <a id="{{ version | replace(from=".", to="_") }}"></a>
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [Unreleased][unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits
    | filter(attribute="scope")
    | sort(attribute="scope") %}
        - **({{commit.scope}})** {% if commit.breaking %}[**breaking**] {% endif %}\
            {{ commit.message | upper_first }} {{ commit.links | join(sep=" ") }}
    {%- endfor -%}
    {% raw %}\n{% endraw %}\
    {%- for commit in commits %}
        {%- if commit.scope -%}
        {% else -%}
            - {% if commit.breaking %}[**breaking**] {% endif %}{{ commit.message | upper_first }} {{ commit.links | join(sep=" ") }}
        {% endif -%}
    {% endfor -%}
{% endfor %}\n
"""
trim = true
footer = """
{% for release in releases -%}
    {% if release.version -%}
        {% if release.previous.version -%}
            [{{ release.version | trim_start_matches(pat="v") }}]: \
                https://github.com/deltachat/deltachat-desktop\
                /compare/v{{ release.previous.version | trim_start_matches(pat="v") }}...v{{ release.version | trim_start_matches(pat="v") }}
        {% endif -%}
    {% else -%}
        [unreleased]: https://github.com/deltachat/deltachat-desktop\
            /compare/v{{ release.previous.version | trim_start_matches(pat="v") }}...HEAD
    {% endif -%}
{% endfor %}
<!-- generated by git-cliff -->
"""

# postprocessors
postprocessors = [
  # { pattern = '<REPO>', replace = "https://github.com/orhun/git-cliff" }, # replace repository URL
]

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
  # Replace issue numbers with links
  { pattern = '#(\d+)', replace = "[#${1}](https://github.com/deltachat/deltachat-desktop/issues/${1})" },
  # Remove skip-changelog markers from commit messages
  { pattern = '\[skip-changelog\]', replace = "" },
  { pattern = 'skip-changelog:', replace = "" },
]
# regex for parsing and grouping commits
commit_parsers = [
    { message = "^feat", group = "Features / Changes"},
    { message = "^fix", group = "Fixes"},
    { message = "^api", group = "API-Changes" },
    { message = "^refactor", group = "Refactor"},
    { message = "^perf", group = "Performance"},
    { message = "^test", group = "Tests"},
    { message = "^style", group = "Styling"},
    { message = "^chore\\(release\\): prepare for", skip = true},
    { message = "^chore", group = "Miscellaneous Tasks"},
    { message = "^build", group = "Build system"},
    { message = "^docs", group = "Documentation"},
    { message = "^ci", group = "CI"},
    { message = ".*", group = "Other"},
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = true
# regex for matching git tags
# tag_pattern = "v[0-9].*"
tag_pattern = "[0-9]+\\.[0-9]+\\.[0-9]+"
# regex for skipping tags
skip_tags = ""
# regex for ignoring tags
ignore_tags = ""
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
# limit the number of commits included in the changelog.
# limit_commits = 42

# [remote.github]
# owner = "deltachat"
# repo = "deltachat-desktop"
# 
# Note: Remote integration is optional and requires a GitHub token to avoid rate limits.
# It can add PR information and contributor data to the changelog.
# 
# To enable:
# 1. Uncomment the section above
# 2. Set GITHUB_TOKEN environment variable:
#    export GITHUB_TOKEN="your_token_here"
# 3. Or use --github-token flag:
#    git cliff --github-token "your_token_here"
#
# For most use cases, local git data is sufficient.
